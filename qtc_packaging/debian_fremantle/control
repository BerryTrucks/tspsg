Source: tspsg
Section: user/hidden
Priority: optional
Maintainer: Oleksii Serdiuk <contacts@oleksii.name>
Homepage: http://tspsg.info/
Standards-Version: 3.7.3
Build-Depends: debhelper (>= 5), libqt4-dev

Package: tspsg
Architecture: any
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: TSP Solver and Generator
 TSPSG is intended to generate and solve Travelling Salesman Problem
 (TSP) tasks. It uses Branch and Bound method for solving. Its input is
 a number of cities and a matrix of city-to-city travel costs. The
 matrix can be populated with random values in a given range (which is
 useful for generating tasks). The result is an optimal route, its
 price, step-by-step matrices of solving and a solving graph. The task
 can be saved in an internal binary format and opened later. The result
 can be printed or saved as PDF, HTML, or ODF.
 .
 TSPSG may be useful for teachers to generate test tasks or just for
 regular users to solve TSPs. Also, it may be used as an example of
 using Branch and Bound method to solve a particular task.
XB-Maemo-Display-Name: TSPSG
XB-Maemo-Icon-26: iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAIAAADYYG7QAAAAA3NCSVQICAjb4U/gAAAACXBIWXMAAA0SAAANOgHo3ZneAAAN5UlEQVRYhZ0ZbWhaZ/dJKttNYsiFKvEuui0skrlpYJcm1DIl2GDKXA1EUIYMC4VeoT8SmsCky9BCfmSQhZStoJRAkiIjZY5dqYMIumJWZQmRLdK5eDNCl6RXokSXSHPXynx/nPXpfdOvve/5Id7nPs855znf51xUew74/f5kMnl4eOj1enO5HMuyLMuK38Lv4OAgrMOeWq0Gv16vN5lMsiyby+XEaI88Pg3o6aXDw0O/3y8mD5BMJmu1WiwWg8dSqQSEYdHv98diMZZl/X4/vAKmxWiBv2Qy+Ty2SqWSBD2GcrlcKBTkcjlJkmq1uqGhIZVKzc7OUhQFGzKZjE6nW1lZ4TiOYRiSJOPxOBx85513GhoaZDIZHC+Xy4IgdHV1cRynUqkIgkAICYJgtVoDgQBFUXq9HiEUj8cbGhrgP0IolUrJZLInDGWzWZlMhhAKh8PpdNrn8yGECoWC1Wq1WCyCIMRiMdjJMAy8pWmapulCoaBSqQqFwuTkpNlsZhimUChsbW1VKpVCoaBWq+HUwsICQojneUzC6XQ2NzcjhDiOg23FYvEJQ3q9PpVKBYNBnuctFgvsk8vlNptNEASE0OnTp2OxmM/nCwQC+E6YpFwuD4VCgUAAeIVfjuOQCBiGAYlOT09TFBUMBmmalsvla2tr2WyW53mGYepqtRoQSKfTDodDpVKBkEGAwWBwaWkJYyRJcmJiIpvNWq1WoEpRVDQahbczMzOJREKj0WSz2UgkArqmKCqdTlMUBSymUqnFxUXMMYZwOCyVSk0mE8JGmsvlwDAPDw/FJmkSATZP2BOLxXK5HPzHhg+P4AG1Wo1l2QsXLgDCXC7H87zYisG6S6WS1+sFv37iZaVSSYwa78bcfPDBByaTyev1Dg4O4kUgDL5We+zzwCtg83q9cBPMIgae5/FBDHWlUgnkXCwW9Xp9OBzGvhCJRMCYeJ4Ph8MEQZTLZbvd3tXVVSgUjEZjIpGwWq1gSXK5HCG0uLjo8/ny+bxCoUilUmtrayaTCVxPrB2e53medzqdoP1AINDV1QV2XFer1RBCgUAgHA4rlUqKomiajkQio6OjW1tbDQ0NY2Nj2ICAIZ7naZpOp9NLS0vBYNDr9QYCAWCL53mTyTQ8PByJROAUMAcxBTymWCyWy2WSJHU6ndFo5DjO4XBgjutqtVo4HEYI9fT0LC8vi42RoqirV6+i/waCILq7u5eWloA/MPNgMOjxeObm5sTyCIfDGo0GfLBcLicSiZ6eHpZlBwYGFAoFYMMuCRsQQnUsy8rlco1GY7PZEEJ+v1+tVp8+fRq9EIaGhnieB9QgA/wqn88TBEGSpM/no2ka/BEglUqBXsTqww4LGqyr1WpwUZ/Pl8lkXC7X01J5AWCB2e32mzdvIoRAp1jM8F/MFnC2traGEOJ5Hvs/KF3CcVw2mzUajQghs9kciURisdhLJYRBqVRCvAaSJpMJh2abzRYKhUAqoD6Iful0ent7e2RkRKVSwU6fz9ff36/X6+PxuATOkyRJUZTL5QKH+vcSKhaLYCjgO2q1GpuFy+WCRQjQgUAgnU4HHgN6HFfj8ThFUYVCwWKxzMzM/ONlCKF4PH7t2rWZmRm43L/nyW63DwwMsCyLEAIFgaaAD7je3NycTCYD36QoamVlpbu7+4iFIYTy+byEYRiLxSKVSiHvZLNZjUbz77mJxWL5fH5zcxNSBIQMi8ViMpk4jpucnARhHCEMYLPZrFarWIrLy8v1gUDAarVyHMfzfLlc1uv1UC28FAiCGBoaQggpFIrFxUW5XE7TNM/zgFCtVgeDQeAGhISzcjgcFluF0Wh0uVz48RhCaH19HUR9+fJlqVQ6Pj7+xx9/PI8PkiTHxsYePXp0/fr1qamp2dnZhoYGiqLq6+vPnDlz4sQJhJAgCCsrKydPnjx+/Hg+n9/Z2dnZ2bl3797AwMDe3t6pU6fW19enpqZu3LiBEIpGo++++y4gn5qaOnb79m2tVqvVatfX19va2nK53Ozs7IsFMzIysr+/39nZefbs2ddff/3BgwfpdPr999+/c+fO7du3V1dXa7Xa4uIiGGI8HrdarZlMhmGYb775ZnNz88SJE52dnaurq19//XWtVgOtdXZ2IoSamprqBgcHQ6GQIAhOp1MQBEhYL1YWxGiEUEdHx8bGBkEQSqVyY2MDssEzj4A2KYoCl2QY5ty5c+IICTVaOBx+kssYhoGcCoFxaGjoeRHSYDAYjUaoWQF7sVgMhUIIIYvFwjAMVIPFYnFtbQ2HPghI7e3tBwcHbrfbYDAANvBKs9kcjUaNRmO9mBLDMNgdoNZ8Jvh8vkQiMTY2Njk5iRA6d+4ccOPz+UZGRqxWq8/nCwaDkGs9Hg+cWlxcLBQKv/76q8fjsdvtCKH+/n6apuHtxMQEQiidTtf5/X64BAhNEAQoOV4AsVgslUqBwH0+3/DwMGQeo9GoUqmam5s3NzehkpHL5VCVgxLgkplMBvDodDqe50dHR7PZrFQqBZEfu379+ocffhgIBMxmM0JIIpHMz8+Pj4+n02kopZ+Gzc3NBw8edHR0RKNRnucfPnxYX1//2muvxePxYrHY29v7/fffg+WqVKqWlpZ4PL6+vp5IJCqVym+//VatViuViiAI+/v7jY2N8/PzP/30UyaTicfjr7zySl2tVmMYBowOigpM+HnWHYlEcKwCuWLpEgTh8/l4nr9y5crBwQE2o0wmI5PJisUiRourF0EQ8M3Hx8frw+Hw1atXKYqC/Foul+EACAzvEzMkjpyQCpubm6GkhIhHUdTFixc9Hs/Y2BhIESG0sbEBtOHO5XKZIAhgBRB++umner1eglWLszTshloCoL29XcwQULVarfF4vFKpQHrieX5ubk6n0+EuhSRJHCBAeEfCCnAD/IVCIbhPfTAYZBiGoigo2J4JFy9eFD+CkXIcZzKZgBtgCCGUyWQIgoACDUiCUmARM4GBJElQBby1Wq31JEnm83mpVHqkURKDWH0IIZ/Pp9FoPB4PtNIIoUgksr29DR00BuiDgZtnooVAmk6nXS4XpLlAIFDHsmxPTw/UoE/XZSDnYDDodDoxFihRSJKEri+TyTxt/lgw8MpgMIAq4Q+0LgghaFfGx8cjkQh4hgS6EHEp+UzABigIwvnz5yFFAA2xAPA2bLOgLIqiSJJ0uVzpdJogiGg0mk6nR0dHoZDt7u4Oh8PgVXU8zysUCihkQfgbGxtiVsDcCIIA+RkMBp7nj+x5wR0MBgPEFJioFAoF9Lheoygqk8mYzWZc1snl8mNSqbS3tzeXy/3+++8cx33xxRfJZLKvr+/u3bsY9ZtvvlmpVL799luE0P7+/v3791/KDUJIIpHo9fqlpaX19fU///zz7t27P//88w8//HDp0qVwOHzjxo2///7b4/G0tLTYbDalUrmzs6PVautpmhYEAfIORVEWiwVSLE5+JpPp/Pnzfr8fHl9aC2AQBIGmabvdHgqFaJq+cuUKRVFKpTKRSOh0Oo7jIF4Hg0GO4/x+P5hy3YULFywWC3ADrgtNLkLI7XYD6iPx9KUAKtbpdB6PB2I3tJEul6tcLrMsC5EsGAwuLCy4XC6n0wmjHJfLVef3+wcGBqABhdkKFJRms/mlWRaJrBiD3W43mUzFYnFyctLlcoGpTk9PDw8PJxIJqVSaSCTcbvfBwUE2m+3p6QGfAM62trbqo9GoQqGYm5sDL3O5XJFIxGq1HvGdZ3IDkhOvGAyGaDS6tbUlk8lkMpnVal1YWBAEgaKohYUFjUZTqVTcbvfy8nJzc7NGo1EoFCBOh8MBk6djQ0ND9+/ft9lsEonk0aNHP/7442effTYxMdHb2zs/Pw809vb2EELVahWodnR0wIp40W639/X1DQwM2Gw2juNomt7d3VUqlW+//Tb0821tbfF4vKen5+HDh9Fo9Pjx42+88cbQ0BCUMQRB9PX1dXZ21rtcLqlUKggClDgURREEwfN8Pp8HSisrK2IDstvt29vb8B8vQp8JfwiCMBqN0WjU4XAcHByQJAnDDblc7nA4YL/b7Yb8+Pnnn/v9fjgFr45JJJKPPvpIIpFUq9U7d+5wHNfU1HTr1i21Wg1xr1qtYjEghP7666/d3d0jRtPY2OhwOFpbWz/55BOtVtvU1NTZ2QnlUVtbW6FQ+O677zo6Or766isI0JcuXapWq1qtdnp62uPxzMzM7O/vT0xMnD179knnCgA5JRqNit0bTxSO2JDdbnc4HNPT09CS9vf3v/fee4IgwARMpVLh6gJsH8I3epzgwAS3tragsIRy4xhN0y0tLcvLy9Vq9csvv+Q4bmlpCQ6AYDo6OnZ3dy9fvnzr1i1syAaD4eOPP3711VdbW1sbGxvPnDlz8uTJaDT6yy+/7O3tmc3m/f391tbWcrksk8lmZma0Wm00Gn3rrbey2SzUuCqVKpFIyOXy1dXVe/funTp1CiFULpfrarWaeMAjCMLc3BxC6ObNm3Cza9euOZ3O8fFxyKOQw8VDLY1GEwwG3W43rn5YloVGQhCEbDbb3t5OkiQMa7Gfg0ig2wFW/vHZIzNH+K4Qi8VgLHrkGwDLsqVSCb4f1B5/XcAzU4zhyGQTjzvxKxiwwiPLsvDVAQa0SDxwxSQBu5genhID9mQyCZRg7ArTYPj+AoNijOQFkMvlSqVS8jEAD08kdHh4CHNnPNp9Jkbx4ks/7fwfcNTLcMMFMy/4ZAFDY5lMhnuuVCoFPai4Ese2yHEcTHChtUX/C/wHAswmZmQrIVUAAAAASUVORK5CYII=
